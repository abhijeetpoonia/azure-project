name: Deploy to AKS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: 'Checkout GitHub repository'
        uses: actions/checkout@v3

      # Step 2: Install Java 17 and SonarQube Scanner
      - name: 'Install Java 17 and SonarQube Scanner'
        run: |
          sudo apt-get update
          # Install Java 17
          sudo apt-get install -y openjdk-17-jdk wget unzip
          
          # Set JAVA_HOME and update alternatives
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV
          sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
          sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV
          
          # Install SonarQube Scanner
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          echo "PATH=$(pwd)/sonar-scanner-4.8.0.2856-linux/bin:$PATH" >> $GITHUB_ENV
          
          # Set SONAR_SCANNER_JAVA to use the installed Java
          echo "SONAR_SCANNER_JAVA=$JAVA_HOME/bin/java" >> $GITHUB_ENV

      # Step 3: Check Java Version
      - name: 'Check Java Version'
        run: java -version

      # Step 4: Run SonarQube Scan
      - name: 'Run SonarQube Scan'
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          projectBaseDir: "."
          args: >
            -Dsonar.projectKey=azure-project  # Your project key
            -Dsonar.projectName="Azure Project"  # Optional: Human-readable name for the project
            -Dsonar.projectVersion=1.0  # Optional: Set your project version
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Your SonarQube authentication token
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # Your SonarQube server URL

      # Step 5: Login to Azure CLI
      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 6: Build and tag the Docker image with a timestamp
      - name: Build and Submit Image
        id: build
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IMAGE_URI=${{ secrets.ACR_LOGIN_SERVER }}/my-app:$TIMESTAMP
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV  # Store timestamp for later use
          
          # Build the Docker image
          docker build -t $IMAGE_URI .
          # Log in to ACR
          echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
          # Push the Docker image to ACR
          docker push $IMAGE_URI

      # Step 7: Set up kubectl and configure AKS credentials
      - name: 'Set up kubectl'
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}   

      # Step 8: Update the deployment file to use the new image tag    
      - name: 'Update Deployment Image'      
        run: |        
          sed -i "s|image: .*|image: ${{ secrets.ACR_LOGIN_SERVER }}/my-app:${{ env.TIMESTAMP }}|g" deployment.yaml    

      # Step 9: Apply the deployment file to the AKS cluster    
      - name: 'Deploy to AKS'      
        run: |        
          kubectl apply -f deployment.yaml
