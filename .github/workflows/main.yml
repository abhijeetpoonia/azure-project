name: Deploy to AKS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: 'Checkout GitHub repository'
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17
      - name: 'Set up JDK 17'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Check Java Version
      - name: 'Check Java Version'
        run: java -version

      - name: Install HashiCorp Vault
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          curl -o vault.zip https://releases.hashicorp.com/vault/1.14.0/vault_1.14.0_linux_amd64.zip   
          unzip vault.zip
          sudo mv vault /usr/local/bin/
          rm vault.zip
          vault -v  # Verify installation

     # Step 6: Login to Vault
       # Step 3: Login to Vault and Fetch Secrets
      - name: 'Login to Vault'
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}  
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}    
        run: |
          echo "Logging into Vault..."
          echo "Vault address is set to $VAULT_ADDR"
          # Fetch multiple secrets and store them in environment variables
          demo=$(vault kv get -field=devops RAW/gopal/abhi)   
          cloud=$(vault kv get -field=cloud RAW/gopal/abhi)  
          
          # Store secrets in the $GITHUB_ENV file
          echo "DEMO=${demo}" >> $GITHUB_ENV
          echo "CLOUD=${cloud}" >> $GITHUB_ENV

      # Step 4: Use grep to Fetch Secrets
      - name: 'Fetch Secrets with grep'
        run: |
          # Use grep to extract the variables from the environment
          fetched_demo=$(grep -E '^DEMO=' $GITHUB_ENV | cut -d'=' -f2)
          fetched_cloud=$(grep -E '^CLOUD=' $GITHUB_ENV | cut -d'=' -f2)


      # Step 4: Run SonarQube Scan
      - name: 'Run SonarQube Scan'
        id: sonar_scan
        uses: sonarsource/sonarqube-scan-action@v3
        with:
          projectBaseDir: "."
          args: >
            -Dsonar.projectKey=azure-project
            -Dsonar.projectName="azure-project"  
            -Dsonar.projectVersion=1.0
            -Dsonar.java.binaries=**/target/classes
            -Dsonar.java.source=17  
            -Dsonar.java.target=17  
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
          JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}

      # Step 5: Fetch the Analysis ID
      - name: 'Check SonarQube Quality Gate Status'
        id: fetch_analysis_id
        run: |
          # Use the SonarQube API to fetch the latest analysis for the project
          ANALYSIS_ID=$(curl -u "${{ secrets.SONAR_TOKEN }}" "${{ secrets.SONAR_HOST_URL }}/api/project_analyses/search?project=azure-project" | jq -r '.analyses[0].key')
          QUALITY_GATE_STATUS=$(curl -u "${{ secrets.SONAR_TOKEN }}" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?analysisId=${ANALYSIS_ID}" | jq -r '.projectStatus.status')
    
          # Check if the Quality Gate passed or failed
          if [ "$QUALITY_GATE_STATUS" = "OK" ]; then
            echo "Quality status: passed"
          else
            echo "Quality status: failed"
            exit 1  
          fi
 
      
      # Step 7: Login to Azure CLI
      - name: 'Login to Azure'
        if: success()  
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 8: Build and tag the Docker image with a timestamp
      - name: 'Build and Submit Image'
        if: success()   
        id: build
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IMAGE_URI=${{ secrets.ACR_LOGIN_SERVER }}/my-app:$TIMESTAMP
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV   
          
          # Build the Docker image
          docker build -t $IMAGE_URI .
          # Log in to ACR
          echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
          # Push the Docker image to ACR
          docker push $IMAGE_URI

      # Step 9: Set up kubectl and configure AKS credentials
      - name: 'Set up kubectl'
        if: success()  
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      # Step 10: Update the deployment file to use the new image tag    
      - name: 'Update Deployment Image'      
        if: success()  
        run: |        
          sed -i "s|image: .*|image: ${{ secrets.ACR_LOGIN_SERVER }}/my-app:${{ env.TIMESTAMP }}|g" deployment.yaml    

      # Step 11: Apply the deployment file to the AKS cluster    
      - name: 'Deploy to AKS'      
        if: success()   
        run: |        
          kubectl apply -f deployment.yaml
