name: Deploy to AKS
on:  
  push:    
    branches:      
      - main  # Triggers workflow on push to the main branch

jobs:  
  build-and-deploy:    
    runs-on: ubuntu-latest    

    steps:    
    # Step 1: Checkout the repository code    
    - name: 'Checkout GitHub repository'      
      uses: actions/checkout@v3    

    # Step 2: Login to Azure CLI    
    - name: 'Login to Azure'      
      uses: azure/login@v1      
      with:        
        creds: ${{ secrets.AZURE_CREDENTIALS }}    

    # Step 3: Get the current timestamp    
    - name: 'Get Current Timestamp'      
      id: timestamp      
      run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV    

    # Step 4: Build the Docker image with the timestamp as the tag    
    - name: 'Build Docker Image'      
      run: |        
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/my-app:${{ env.TIMESTAMP }} .    

    # Step 5: Push the Docker image to Azure Container Registry (ACR)    
    - name: 'Push Image to ACR'      
      run: |        
        echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin        
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/my-app:${{ env.TIMESTAMP }}    

    # Step 6: Set up kubectl and configure AKS credentials    
    - name: 'Set up kubectl'      
      run: |        
        az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}    

    # Step 7: Update the deployment file to use the new image tag    
    - name: 'Update Deployment Image'      
      run: |        
        sed -i "s|image: .*|image: ${{ secrets.ACR_LOGIN_SERVER }}/my-app:${{ env.TIMESTAMP }}|g" deployment.yaml    

    # Step 8: Apply the deployment file to the AKS cluster    
    - name: 'Deploy to AKS'      
      run: |        
        kubectl apply -f deployment.yaml
